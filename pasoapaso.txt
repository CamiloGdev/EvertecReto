backend y frontend

/////
CONFIGURACIONES INICIALES
Ver los videos que explican Breeze y Fortify

-Se inicia proyecto Laravel con artizan

-Se instala con composer el Laravel UI 
-Se genera el scaffolding con login/registration, con bootstrap
-se compila con npm install y npm run dev (se debe inicializar el mix?)

-Se instala con composer el Laravel Fortify
-se publican los resources de Fortify (se genera el directorio actions en app, el provider, el config)
-Se agrega el provaider de Fortify en el config app.php
-se configura .env con la info de la DB
-se realiza el migrate 
-se indica al proviaider de Fortify como resolver las vistas del frontend (se copian de la documentacion de Fortify)

-Se eimina la carpeta de controladores para el backend "Auth" generada automaticamente al instar Laravel UI
-Se quitan las rutas de "Auth::routes" generadas automaticamente al instalar UI, se comentan ya que no se va a usar el backend de UI sino el de Fortify (con las vistas modificadas de UI)
-permanecen las vistas generadas en "Auth" por la instalaci칩n de UI ya que Fortify no tiene frontend por lo que se usara el de UI

-en el fortifyprovider se cambian los nombre de las vistas por defcto que se retornan para que coincidan con las de UI
/////

-se descarga el template de vistas "material dashboard" y se abre en editor de codigo
-se reemplaza el codigo de la vista login del proyecto por el de la plantilla, el metodo de llamdo y la ruta son las mismas.
-ya que varias vistas de la plantilla se extienden de la vista "layouts/app", se crea un nuevo layout en el proyecto llamado main (para no borrar el app original, y en este se copia el contenido de "app" de la plantilla.
-copoamos los archivos desde la plantilla a los que el frontend debe recurir para mostrar, como imajenes e iconos css y js, y los copiamos en la carpeta de nuetro proyecto.
-copiamos las carpetas con las vistas necesarias desde la plantilla a los que el frontend debe recurir para mostrar, y los copiamos en la carpeta de nuetro proyecto.
-se verifica en cada una de las vistas (en este caso main) que se vallan necesitando cuales recursos hacen falta, y se procede a importar estos desde la plantilla, o  en el caso de que no se consideren necesarios se omiten (se borran los plugins de js no utiles), generamente los trae desde la carpeta public con un prefijo "asset", por lo que se pueden buscar en el documento co nesta palabra, (en la mayoria de los casos la plantilla recurrre a una subcarpeta en public, pero en nuestro proyecto los recursos estan directamente en public, po rlo que solo hay que quitar el acceso a la subcarpeta).
-quitamos del navbar la opcion dashboard y la opcion profile
//////

-se realisa el mismo procedimiento con la vista register como con la vista login, se trae el codigo de la plantilla.
-se terminan de quital los plugins en el layout main que no son necesarios por ahora (los comente)
-se personaliza un poco la vista main
	*se cambia el titulo de pesta침a
-Se quitan componentes los sidebar fikters que salian al estar logeados.
-se personalizan la vista de login
	*se cambia el subtitulo de login
	*se quitan los iconos de acceso con redes sociale
	*se quita el relleno por defecto del correo y contrase침a de la plantilla
	*se cambia el nombre del boton Log in, y otros textos de la vista
-se personalizan la vista de registro
	*se quita el check de politicas de privacidad
-se personalizan el layout futer guest
	*se quita el mensaje de pie de pagina
/////

-se realisa el mismo procedimiento con la vista dashboard (pero se pega en home) como con la vista login, se trae el codigo de la plantilla.
-dado que dashboard acude a muchas rutas en sus secciones de vavegaci칩n, se inhabilitan todas estas a las que recure por ahora(se pone # en lugar de la ruta), tanto en sidebar como en navs.auth, para mas tarde ir habiliatando segun se necesiten.
-








