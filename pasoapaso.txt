Ver los videos que explican Breeze y Fortify

/////
CONFIGURACIONES INICIALES (se realiza con bootstrap)

-Se inicia proyecto Laravel con artizan

-Se instala con composer el Laravel UI 
-Se genera el scaffolding con login/registration, con bootstrap
-se compila con npm install y npm run dev (se debe inicializar el mix?)

-Se instala con composer el Laravel Fortify
-se publican los resources de Fortify (se genera el directorio actions en app, el provider, el config)
-Se agrega el provaider de Fortify en el config app.php
-se configura .env con la info de la DB
-se realiza el migrate 
-se indica al proviaider de Fortify como resolver las vistas del frontend (se copian de la documentacion de Fortify)

-Se elimina la carpeta de controladores para el backend "Auth" generada automaticamente al instar Laravel UI
-Se quitan las rutas de "Auth::routes" generadas automaticamente al instalar UI, se comentan ya que no se va a usar el backend de UI sino el de Fortify (con las vistas modificadas de UI)
-permanecen las vistas generadas en "Auth" por la instalación de UI ya que Fortify no tiene frontend por lo que se usara el de UI

-en el fortifyprovider se cambian los nombre de las vistas por defcto que se retornan para que coincidan con las de UI
/////

-se descarga el template de vistas "material dashboard" y se abre en editor de codigo
-se reemplaza el codigo de la vista login del proyecto por el de la plantilla, el metodo de llamdo y la ruta son las mismas.
-ya que varias vistas de la plantilla se extienden de la vista "layouts/app", se crea un nuevo layout en el proyecto llamado main (para no borrar el app original, y en este se copia el contenido de "app" de la plantilla.
-copoamos los archivos desde la plantilla a los que el frontend debe recurir para mostrar, como imajenes e iconos css y js, y los copiamos en la carpeta de nuetro proyecto.
-copiamos las carpetas con las vistas necesarias desde la plantilla a los que el frontend debe recurir para mostrar, y los copiamos en la carpeta de nuetro proyecto.
-se verifica en cada una de las vistas (en este caso main) que se vallan necesitando cuales recursos hacen falta, y se procede a importar estos desde la plantilla, o  en el caso de que no se consideren necesarios se omiten (se borran los plugins de js no utiles), generamente los trae desde la carpeta public con un prefijo "asset", por lo que se pueden buscar en el documento co nesta palabra, (en la mayoria de los casos la plantilla recurrre a una subcarpeta en public, pero en nuestro proyecto los recursos estan directamente en public, po rlo que solo hay que quitar el acceso a la subcarpeta).
-quitamos del navbar la opcion dashboard y la opcion profile
//////

-se realisa el mismo procedimiento con la vista register como con la vista login, se trae el codigo de la plantilla.
-se terminan de quital los plugins en el layout main que no son necesarios por ahora (los comente)
-se personaliza un poco la vista main
	*se cambia el titulo de pestaña
-Se quitan componentes los sidebar fikters que salian al estar logeados.
-se personalizan la vista de login
	*se cambia el subtitulo de login
	*se quitan los iconos de acceso con redes sociale
	*se quita el relleno por defecto del correo y contraseña de la plantilla
	*se cambia el nombre del boton Log in, y otros textos de la vista
-se personalizan la vista de registro
	*se quita el check de politicas de privacidad
-se personalizan el layout futer guest
	*se quita el mensaje de pie de pagina
/////

-se realisa el mismo procedimiento con la vista dashboard (pero se pega en home) como con la vista login, se trae el codigo de la plantilla.
-dado que dashboard acude a muchas rutas en sus secciones de vavegación, se inhabilitan todas estas a las que recure por ahora(se pone # en lugar de la ruta), tanto en sidebar como en navs.auth, para mas tarde ir habiliatando segun se necesiten.
-quitamos upgrade to pro de sidebar (se comenta)
-se corrige otras rutas en sidebar que llaman a subcarpeta de public.material, para que recurran directamente a public.
-de la vista home se quitan los llamados a js, ya que dichos plugins se quitaron de main para no usarlos.
-de la vista home comentamos los demas elementos de la seccion de contenido para que quede una plantilla en blanco.
DESDE ACA SE PEUDE DEJAR EL PROYECTO COMO PLANTILLA.
//////

-Vamos a crear un nuevo campo para usuario, username
-creamos una migracion para agregar el campo a la tabla users, no se debe modificar la tabla original, se deben agregar los campos bajo otra migración
-se agrega el username a protected filable en el modelo user
-en la vista register copiamos el codigo del campo name para el campo username, y cambiamos user por usernamen en el codigo.
-cambiamos el icono para el input username cambiando el nombre en vista register
-se debe modificar el controlador de create agregando username, ademas se le otorga la caracteristica unique (recordad que al instalar Fortify los controladores de login quedan en la carpeta app.actions)
-espesificamos en config.fortify que el login sera tambien con el username en ves de solo con email.
-en la vista login copiamos el codigo del campo email para el campo username, y cambiamos email por usernamen en el codigo. (ME ESTA ARROGANDO ERROR DE "(Too Many Requests)" CUANO INTENTO LOGEARME, al parecer por hacer muchas peticiones de acceso)
-para permitir login con username o email, se debe agregar a fortifyservice provider la Customizing User Authentication (se saca de la docuentacio), y lo configuramos para que devuelva username, ya sea que se escriba email o username.
/////

+++++no estan en la descripcion del ultimo commit++++++
-creamos un controlador par ael CRUD
-creamos el metodo create en el usercontroller, llamando a la vista users.create
-creamos la vista users.create
-creamos la ruta get para la vista create para el CRUD
-extendemos de los layouts las secciones necesarias para la vista create, y le pasamos como parametros a sidebar y a navs.auth, el titlePage y el activePage
-en el sidebar tomamos la seccion table para nuestro users, y reemplazamos los table por users en el codigo
-modificamos el content de la visata create para que reorganise, con los respectivos div (tomando como ejemplo la vista profile.edit de la plantilla, no se copia completa ya que muchos elementos de esta no seran usados.)
-creamos un form-post, y llamamos la clase de la plantilla form-hotizontal, y declaramos el crsf
-seguimos modificando el content basados en la plantilla para agregar las secciones nencesarias para la vista
	*agregamos los label para el card header
	*agregamos los label y los input para el card body
	*agregamos los botonesel para el card footer
-creamos el metodo store el usercontroller, llamando a la misma vista con redirect->back, llamando a los respectivos modelos necesarios
-creamos la ruta store para la vista create para el CRUD, esta ves asignamos un nombre para hacer el llamado con la ruta users.store
-asignamos la accion del form create en la vista para que dirija a la ruta 
-en el usercontroller asignamos el has al pasword para que la guarde encriptada en la DB

//////

-creamos el metodo index en el usercontroller, llamando a la misma vista users.index
-en el metodo llamamos los registros de la DB con paginacion de 5
-extendemos de los layouts las secciones necesarias para la vista index, y le pasamos como parametros a sidebar y a navs.auth, el titlePage y el activePage
-cambiamos el nombre de la pestaña de table a users en el sidebar
-modificamos el content de la visata index para que reorganise, con los respectivos div (tomando como ejemplo la vista de la plantilla, no se copia completa ya que muchos elementos de esta no seran usados.)
-seguimos modificando el content basados en la plantilla para agregar las secciones nencesarias para la vista
	*agregamos para el card header
	*agregamos para el card body
		-creamos los encabezados de la tabla
		-recorremos el arreglo para listar los registros
		
	*agregamos para el card footer
-creamos la ruta store para la vista index para el CRUD, esta ves asignamos un nombre para hacer el llamado con la ruta users.index
-para los botones de paginacion, agregamos el helper {{ $users->links() }} en el footer, y agregamos los parametros de paginacion en el user controller
-ya que laravel 8 trabaja con tailwind, debemos cambiar a bootstrap para que los botones de paginacion se vean correctamente agregando las lineas desde la documentacion en el appserviceprovidre.
--TAMBIEN SE PUEDE USER DATATABLES--
-agregamos boton al index para añadir nuevo usuario
-le asignamos name a la ruta create
-en el action del boton asignamos la ruta respectiva.
-paea el sidebar asignamos la ruta de users.index a la pestaña users
-modificamos el return del modelo store para que al dar save nos retorne a la vista index
////

-agregamos la alerta en la vista index para que cuando retorne de create con el boton save aparesca el mensaje, usando el helper de larabel succes
-en el metodo store del usercontroller le indicamos al return view que traiga el helper success con el mensaje definido (solo funciona para esa secion, al refrescar se borra)
//////

-agregamos los botones actions para el CRUD en la vista index, con las class de la plantilla para los tamaños y la ubicacion deseada
-creamos el metodo show en el usercontroller, asignando como parametro id 
-traemos el usuario con el metodo find del usermodel, con la variable id.
-llamando a la vista show, pasando como reistro el usuario encontrado.
-creamos la ruta show para el CRUD, esta ves asignamos un nombre para hacer el llamado con la ruta users.show
-creamos la vista users.show
+++++no estan en la descripcion del ultimo commit++++++
-creamos las cards nesesarias para mostrar el usuario.
-traemos los datos del usuario encontrado a la card
-guardamos una imagen de default-avatar en la carpeta puplic.img y la asignamos a la card povisionalmente
-en el metodo show en el usercontroller, le cambiamos el metodo de busqueda de Find por FindOrFail, para que el no encontrar ningun registro devuelva un mensaje de error.
-en la vista users.index cambiamos los botones para el CRUD por harefs para acceder a las opciones por medio de las rutas, los parametros de route los pasamos con la ruta y el id, para que lleve al controlador el usuario deseado.
????-en usercontroller Cambiamos el argumento del metodo show de id por 'user $user' y asi podemos quitar el findOrfail, con esto se simplifica el codigo y el resultado es el mismo
??como puedo volver pero a la pagina en que estaba el usuario seleccionado??-en vista show creamos un boton para retornar a index.
////

-creamos el metodo edit para el usercontroller, retornando la vista edit con el parametro del usuario requerido.
-creamos la ruta edit para el CRUD, esta ves asignamos un nombre para hacer el llamado con la ruta users.edit
-en la vista users.index cambiamos los botones para el CRUD por harefs para acceder a las opciones por medio de las rutas, los parametros de route los pasamos con la ruta y el id, para que lleve al controlador el usuario deseado.
-duplicamos la vista user.create y la llamamos user.edit, sera la misma vista pero al acceder traera los datos del usuario.
-cambiamos los titulos y labels
-quitamos los placehoder de los input
-creamos el metodo update para el usercontroller
-creamos la ruta update con put para el CRUD, esta ves asignamos un nombre para hacer el llamado con la ruta users.update
en la vista edit cambiamos el llamado de la ruta store por update, y le agregamos como parametro el usuario a editar con el id
-ya que los metodos de http son get y post, pero necesitamos llamar al metodo put, debajo del llamado al action de la vista edit actualizamos el metodo con @method("PUT")
-para el metodo update, para que se actualice con o sin contreseña si el usuario cambio esta o no, codificamos el condicional necesario.
-retornamos la vista user.index, con un mensaje success de actualizacion de datos exitosa.
////

-modificamos la ruta llamada por el metodo store para que retorne a show en ves de a index, se debe declarar ademas el id para que retorne el usuario especifico, para esto se debe tambien antes declarar la variable.
-el mensaje success esta definido en la vista index mas no en la vista show, por lo que
-hacemos lo mismo para elmetodo update
-en la vista modificamos el boton edit para que rediteccione tambien a edit.
////

-creamos el metodo destroy para el usercontroller, retornando la vista index con back.
-creamos la ruta destroy con delete para el CRUD, esta ves asignamos un nombre para hacer el llamado con la ruta users.delete
-para el boton eliminar de la vista index creamos un form y con la ruta y el el parametro id del usuario, y con el metodo posto que luego cambiaremos a delete.
-agregamos la llave @csrf y cambiamos el metodo a delete, cambiamos el type del button a submit
-asignamos un style al form para que el boton se vea en la misma linea de los otros dos.
-asignamos un onsubmit al form para alertar y solicitar confirmacion de la eliminacion del usuario.
/////

-para validar en el metodo store recurrimos al metodo validate
-???podemos usar el metodo validator de los controladores de Fortify???
-establecemos las validaciones en el metodo store para todos los campos, incluyendo el unique en email y username
-agregamos a la vista create el codigo bajo el cardbody para mostrar los mensajes de error por las validaciones.(la variable error viene declarada por defecto en laravel.
-agregamos value old a los input de la vista create para que al denegar la accion por alguna validación no se borren los datos ya ingresados por el usuario y los pueda modificar facilmente, menos en el campo password.
-movemos los mensajes de alerta por validacion bajo cada uno de los input en ves de arriba en el card body, para esto debemos separarlos por campo llamando con has y el nombre del input, en ves de llamar a all.
/////

-para no agregar mucha funcionalidad ditectamente en usercontroller, creamos un request para el create del usercontroller para manejar las validaciones, con php artisan make:request
-cambiamos el parametro authorize de reques nuevo a true
-llevamos las validaciones del controlador hacia el request, y le agregamos el unique tambien a username.
-creamos tambien un request para el edit del usercontroller para manejar las validaciones, con php artisan make:request
-cambiamos el parametro authorize de reques nuevo a true
-duplicamos las validaciones desde el otro request al de edit, 
-agregamos a la vista edit el codigo para mostrar los mensajes de error por validacion como en la vista create.
-en el valio de los input agregamos old(y el nombre de la variable), esto para que en prinsipio traiga los campos del usuario a editar, pero que al ingresar un campo invalido nos traiga dicho ingreso errado y poder corregir sobre este.
-????no entendi bien la diferencia entre las 2 formas???? como esta obliga a cambiar los campos de username y de email cuando editamos ya que estan com unique, para corregir esto se debe decir a la validacion que siga siendo unique pero que tambien acepte como valor el mismo que ya tiene el usuario que intentamos editar (es decir un nuevo unico ó el mismo), (lo pongo de dos formas posibles para tenerlo como referencia)
////

???averiguar por que???#######RETORNO AL COMMIT ANTES DE LA INTEGRACION DE PERMISSION PARA INSTALAR LA VERSION 4 YA QUE LA 5 ME ESTA FALLANDO#######, sale error en la migracion.
???por que al devolverme un commit devo hacer nuevamente composer instal para remover un paquete si se supone que dicho paquete no estaba instalado en ese commit???

-vamos a INTEGRAR LARAVEL PERMISSION
-instalamos con composer require spatie/laravel-permission
-publicamos la migracion y los archivos de configuracion con php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider"
-limpiamos cache con php artisan optimize:clear
-ejecutamos las migraciones con php artisan migrate, con lo que se crean las tablas asociadas a la funcionalidad de los roles.

/////

-Contruimos funcion index para el CRUD PARA PERMISOS Y ROLES
-creamos el controlador con php artisan make:controller PermissionController --resource, con esta vandera para que nos cree de una ves los metodos del CRUD.
-corregir error para cuando un usuario no logeado trate de acceder a una vista especifica del aplicativo lo envie a la vista login, lo hacemos creando una grupo de rutas con el midelwere auth.
-creamos las rutas para permissions con resource para que se generene automaticamente
-codificamos el metodo index de permissions
-creamos la vista index configuramos sus parametros de entrada
-asignamos y configuramos la pestaña para la seccion permissions
-codificamos la vista index en base a la de users
-cambiamos el foreach por forelse para mostrar un mensaje cuando no hay permisos registrados.
/////

-contruimos funcion create
-creamos el metodo, cramos la vista a partir del create de users
-???de que se trata el route model banding que se asigna como parametro al modelo del controller por ejemplo show???
-contruimos funcion show
-creamos el metodo, cramos la vista a partir del show de users

!!!!!!!!!!!!!!!!
*agrecal control por roles
*agregar activar y desactivar users
*agregar confirmacion de contraseña en la vista edit y create, puedo usar los de fortify? junto con su has make?? que s epueden ver en los controladores de actions.
*agrecar confirmacion por correo electronico solo en register, en add user debe quedar por defecto en verificado

*quitar de la lista de usuarios al usuario que esta modificando
*modificar el usuario logeado desde la opcion verfil del vanbar
*integrar las validaciones en los permisos, con sus respectivos mensajes de alerta, con los requare respectivos
*integrar los mensajes de success para los permisos
*cambiar el defpult avatar del permiso


instalar laravel degub 






